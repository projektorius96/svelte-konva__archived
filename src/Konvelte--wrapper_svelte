<!-- <SandBox /> -->
<!-- <Stage />  -->
<!-- <Layer /> --> 

<script>

    import svelte, {onMount} from 'svelte';
    // === TESTING COMPONENTS [START]:
        import SandBox from './tests/Konvelte--konva-core__sandbox.svelte';
    // === TESTING COMPONENTS [END]:
    import Stage from './pkgs/Konvelte--stage.svelte';
    import Layer from './pkgs/Konvelte--layer.svelte';
    let isMounted = false;
    let stageInstance = undefined;
    let layerInstance = undefined;

    $: if (stageInstance && layerInstance) {
        globalThis.KONVA_GLOBAL__STAGE = stageInstance // KONVA GLOBALS (DEBUGGING PURPOSES ONLY)
        /* stageInstance.add(layerInstance) */
    }
    
    // TIP : this is top-level useEffect-like reactive statement
    $: if (isMounted) {

        console.log("--App $$props: ", $$props)
        // ===
            // new SandBox({
            //     target: $$props.sharedTarget,
            // });
        // ===
        stageInstance = new Stage({
            target: $$props.sharedTarget,
            props: {
                stageConfig: {
                    container: $$props.sharedTarget,
                    width: 960,
                    height: 480,
                }, 
            }
        })
        layerInstance = new Layer({
            target: $$props.sharedTarget,
        })

    }

    onMount(()=>{
        
        isMounted = true;
        console.log("onMount ([pathspec].svelte)");
        
        // - in case of onDestroy internal call, do (return) the following :
        return (()=>{
            console.log("onDestroy ([pathspec].svelte)");
        })

    })

</script>

<style>
    
    @import './styles/index.css';
    
</style>

